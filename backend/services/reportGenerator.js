const PDFDocument = require('pdfkit');
const path = require('path');
const QRCode = require('qrcode');

const colors = {
    primary: '#4F46E5',
    text: '#1F2937',
    muted: '#6B7280',
    accent: '#10B981',
    warning: '#F59E0B',
    danger: '#EF4444',
    lightGray: '#F3F4F6',
    border: '#D1D5DB',
    white: '#FFFFFF',
};

const fonts = {
    regular: path.join(__dirname, '../assets/Inter-Regular.ttf'),
    bold: path.join(__dirname, '../assets/Inter-Bold.ttf'),
};

function generateHeader(doc) {
    doc.image(path.join(__dirname, '../assets/app_logo.png'), 35, 34, { width: 85 });
    doc.fillColor(colors.text).font(fonts.bold).fontSize(20).text('Screening Summary', 50, 47, { align: 'center' });
    doc.fillColor(colors.muted).font(fonts.regular).fontSize(10).text(`Report Date: ${new Date().toLocaleDateString()}`, 50, 52, { align: 'right' });
    generateHr(doc, 95);
}

async function generateFooter(doc, appUrl) {
    generateHr(doc, 720);
    const pageNum = doc.page.number;
    doc.fontSize(8).fillColor(colors.muted).font(fonts.regular)
       .text('Generated by Smart Resume Screener', 50, 730);


    if (appUrl) {
        try {
            const qrCode = await QRCode.toDataURL(appUrl, { width: 70, margin: 1 });
            doc.image(qrCode, 500, 725, { fit: [50, 50] });
        } catch (err) { console.error("QR Error", err); }
    }
}

function generateHr(doc, y) {
    doc.strokeColor(colors.border).lineWidth(0.5).moveTo(50, y).lineTo(550, y).stroke();
}

function generateStatCard(doc, x, y, title, value, valueFontSize = 24) {
    doc.fontSize(10).font(fonts.bold).fillColor(colors.muted).text(title, x, y, { align: 'center', width: 150 });
    doc.fontSize(valueFontSize).font(fonts.bold).fillColor(colors.text).text(value, x, y + 15, { align: 'center', width: 150 });
}

function generateScoreBar(doc, label, score) {
    const barWidth = 200;
    const barHeight = 8;
    const filledWidth = (score / 10) * barWidth;
    let barColor = colors.danger;
    if (score >= 8) barColor = colors.accent;
    else if (score >= 5) barColor = colors.warning;

    doc.fontSize(10).font(fonts.regular).fillColor(colors.text).text(label.replace(/_/g, ' '), { continued: true });
    doc.fillColor(colors.muted).text(` (${score}/10)`);
    doc.rect(doc.x, doc.y, barWidth, barHeight).fill(colors.lightGray);
    doc.rect(doc.x, doc.y, filledWidth, barHeight).fill(barColor);
    doc.moveDown(1.5);
}

async function buildReport(dataCallback, endCallback, batch, appUrl) {
    const doc = new PDFDocument({ bufferPages: true, margin: 50 });
    const results = batch.candidates;

    doc.registerFont('Inter-Regular', fonts.regular);
    doc.registerFont('Inter-Bold', fonts.bold);

    doc.on('data', dataCallback);
    doc.on('end', endCallback);

    const sortedResults = [...results].sort((a, b) => b.screeningResult.match_score - a.screeningResult.match_score);
    const topCandidate = sortedResults[0]?.screeningResult.candidate_name || 'N/A';

    generateHeader(doc);
    
    generateStatCard(doc, 130, 140, 'TOTAL RESUMES', `${results.length}`);
    generateStatCard(doc, 320, 140, 'TOP CANDIDATE', topCandidate, 18);

    let tableY = 250;
    doc.fontSize(14).font(fonts.bold).fillColor(colors.text).text('Candidate Ranking', 50, tableY);
    tableY += 30;
    
    doc.font('Inter-Bold').fontSize(10).fillColor(colors.muted)
       .text('RANK', 50, tableY)
       .text('CANDIDATE', 100, tableY)
       .text('SCORE', 500, tableY, { width: 50, align: 'right' });
    generateHr(doc, tableY + 15);
    tableY += 25;

    sortedResults.forEach((result, i) => {
        const { candidate_name, match_score } = result.screeningResult;
        const name = candidate_name || 'Unnamed';
        const rowY = tableY + i * 35;
        doc.font('Inter-Bold').fontSize(12).fillColor(colors.text).text(`${i + 1}.`, 50, rowY);
        doc.font('Inter-Regular').text(name, 100, rowY, { width: 280 });
        doc.font('Inter-Bold').fillColor(colors.primary).text(`${match_score}`, 500, rowY, { width: 50, align: 'right' });
        if(i < sortedResults.length - 1) generateHr(doc, rowY + 25);
    });

    await generateFooter(doc, appUrl);

    if (batch.jobDescription) {
        doc.addPage();
        generateHeader(doc);
        doc.fontSize(24).font('Inter-Bold').fillColor(colors.text).text('Job Description Analyzed', 50, 120);
        doc.moveDown(1);
        const cleanedJd = batch.jobDescription.replace(/\r/g, '');
        doc.fontSize(11).font('Inter-Regular').fillColor(colors.muted).text(cleanedJd, { align: 'justify', lineGap: 4 });
        await generateFooter(doc, appUrl);
    }

    for (const result of sortedResults) {
        doc.addPage();
        generateHeader(doc);

        const { candidate_name, match_score, justification, criteria_scores, candidate_skills, missing_skills } = result.screeningResult;
        
        doc.roundedRect(50, 110, 500, 70, 8).fill(colors.primary);
        doc.fontSize(22).font('Inter-Bold').fillColor(colors.white).text(candidate_name || 'Unnamed Candidate', 70, 125, { width: 350 });
        doc.fontSize(11).font('Inter-Regular').text('OVERALL SCORE', 400, 128, { align: 'right', width: 130 });
        doc.fontSize(26).font('Inter-Bold').text(`${match_score}/100`, 400, 145, { align: 'right', width: 130 });
        
        let currentY = 210;

        doc.fontSize(12).font('Inter-Bold').fillColor(colors.text).text('Analyst Justification', 50, currentY);
        doc.fontSize(10).font('Inter-Regular').fillColor(colors.muted).text(justification, 50, doc.y + 5, { align: 'justify', lineGap: 3 });
        currentY = doc.y + 15;
        generateHr(doc, currentY);
        currentY += 20;

        if (criteria_scores) {
            doc.fontSize(12).font('Inter-Bold').fillColor(colors.text).text('Score Breakdown', 50, currentY);
            const breakdownStartY = currentY + 25;

            doc.y = breakdownStartY;
            doc.x = 50;
            if (criteria_scores.Experience_Relevance) generateScoreBar(doc, 'Experience_Relevance', criteria_scores.Experience_Relevance);
            if (criteria_scores.Skills_Match) generateScoreBar(doc, 'Skills_Match', criteria_scores.Skills_Match);
            const leftHeight = doc.y;

            doc.y = breakdownStartY;
            doc.x = 320;
            if (criteria_scores.Project_Quality) generateScoreBar(doc, 'Project_Quality', criteria_scores.Project_Quality);
            if (criteria_scores.Educational_Fit) generateScoreBar(doc, 'Educational_Fit', criteria_scores.Educational_Fit);
            const rightHeight = doc.y;

            currentY = Math.max(leftHeight, rightHeight) + 15;
            generateHr(doc, currentY);
            currentY += 20;
        }
        
        doc.y = currentY;
        doc.fontSize(12).font('Inter-Bold').fillColor(colors.text).text('Skills Analysis', 50, doc.y);
        doc.moveDown(1.5);

        if (candidate_skills && candidate_skills.length > 0) {
            doc.fontSize(10).font('Inter-Bold').fillColor(colors.accent).text("Candidate's Strengths");
            doc.moveDown(0.5);
            doc.fontSize(10).font('Inter-Regular').fillColor(colors.muted).text(candidate_skills.join('  •  '), {
                lineGap: 4,
            });
        }

        doc.moveDown(1.5);

        if (missing_skills && missing_skills.length > 0) {
            doc.fontSize(10).font('Inter-Bold').fillColor(colors.danger).text("Missing Skills");
            doc.moveDown(0.5);
            doc.fontSize(10).font('Inter-Regular').fillColor(colors.muted).text(missing_skills.join('  •  '), {
                lineGap: 4,
            });
        }

        await generateFooter(doc, appUrl);
    }
    
    doc.end();
}

module.exports = { buildReport };